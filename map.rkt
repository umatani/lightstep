#lang racket/base
(require (for-syntax racket/base syntax/parse)
         (only-in racket/hash hash-union)
         (only-in racket/mutability immutable-hash?)
         (only-in "match.rkt" define-match-expander)
         (only-in "misc.rkt" unzip)
         (only-in "set.rkt" [-‚àà set-‚àà] [-for/set for/set] [-in-set in-set]))
(provide -make (rename-out [map? ?]) -‚àÖ -‚àÖ? -‚àà -size =? -dom -rng
         -‚à™ -update -remove -map -filter -restrict
         ->set <-set ->list <-list <-hash
         -for/map -in-map
         (rename-out [->set      ‚Üíset]
                     [<-set      ‚Üêset]
                     [->list     ‚Üílist]
                     [<-list     ‚Üêlist]
                     [repl->hash ->hash]
                     [repl->hash ‚Üíhash]
                     [<-hash     ‚Üêhash]))
;; provided from lightstep/base with prefix `map-'
;; also, aliases are provided from lightstep/base:
;;   ‚Ü¶        = map-make
;;   dom      = map-dom
;;   rng      = map-rng
;;   ‚äî        = map-‚à™
;;   restrict = map-restrict
;;   for/map  = map-for/map
;;   in-map   = map-in-map
;;   set->map = map<-set
;;   set‚Üímap  = map‚Üêset
;;   set<-map = map->set
;;   set‚Üêmap  = map‚Üíset

;; ============================================================================
;; Finite map: Œ± ‚Ü¶ Œ≤

;; Œ±   ‚Üí Œ≤
;; Œ± Œ≤ ‚Üí (Œ± ‚Ü¶ Œ≤)
(struct repl (>hash)
  #:transparent  ;; for equal?
  #:property prop:sequence
  (Œª (m) (-in-map m))
  #:property
  prop:procedure
  (case-Œª
   [(m x) 
    (if (-‚àà x m)
      (hash-ref (repl->hash m) x)
      (error 'map "has no value for key: ~s" x))]
   [(m x v)
    (repl (hash-set (repl->hash m) x v))])
  #:methods gen:custom-write
  [(define (write-proc m port mode)
     (when mode (write-string "{" port))
     (let ([es (hash->list (repl->hash m))]
           [recur (case mode
                    [(#t) write]
                    [(#f) display]
                    [else (Œª (p port) (print p port mode))])])
       (unless (zero? (length es))
         (recur (caar es) port)
         (write-string " ‚Ü¶ " port)
         (recur (cdar es) port)
         (for-each (Œª (e)
                     (write-string ", " port)
                     (recur (car e) port)
                     (write-string " ‚Ü¶ " port)
                     (recur (cdr e) port))
                   (cdr es))))
     (when mode (write-string "}" port)))])

;; List([Œ± . Œ≤]) ‚Üí (Œ± ‚Ü¶ Œ≤)
(define (<-list l)
  (repl (make-immutable-hash l)))

;; [Œ± Œ≤] ... ‚Üí (Œ± ‚Ü¶ Œ≤)
(define-match-expander -make
  (Œª (stx)
    (syntax-case stx (... ...)
      [(_ (x y) ... [xs ys] (... ...))
       #'(? map? (app ->list
                      (list-no-order `(,x . ,y) ... (cons xs ys) (... ...))))]
      [(_ (x y) ... m (... ...))
       #'(? map? (app ->list
                      (list-no-order `(,x . ,y) ... m (... ...))))]
      [(_ (x y) ...)
       #'(? map? (app repl->hash (hash (x y) ...)))]))
  (Œª (stx)
    (syntax-case stx ()
      [(_ (x y) ...)
       #'(<-list (list (cons x y) ...))])))

;; Any ‚Üí Boolean
(define map? repl?)

;; (Œ± ‚Ü¶ Œ≤)
(define -‚àÖ (-make))

;; (Œ± ‚Ü¶ Œ≤) ‚Üí Boolean
(define (-‚àÖ? m)
  (hash-empty? (repl->hash m)))

;; Œ± (Œ± ‚Ü¶ Œ≤) ‚Üí Boolean
;;   (Œ± ‚Ü¶ Œ≤) ‚Üí Seq([Œ± Œ≤])
(define -‚àà
  (case-Œª
   [(k m) (hash-has-key? (repl->hash m) k)]
   [(  m) (-in-map m)]))

;; (Œ± ‚Ü¶ Œ≤) ‚Üí Nat
(define (-size m)
  (hash-count (repl->hash m)))

;; (Œ± ‚Ü¶ Œ≤) (Œ± ‚Ü¶ Œ≤) ‚Üí Boolean
(define (=? m‚ÇÅ m‚ÇÇ)
  (and (= (-size m‚ÇÅ) (-size m‚ÇÇ))
       (for/and ([(k‚ÇÅ v‚ÇÅ) (-‚àà m‚ÇÅ)])
         (equal? v‚ÇÅ (m‚ÇÇ k‚ÇÅ)))))

;; (Œ± ‚Ü¶ Œ≤) ‚Üí ùí´(Œ±)
(define (-dom m)
  (for/set ([(k _) (-‚àà m)]) k))

;; (Œ± ‚Ü¶ Œ≤) ‚Üí ùí´(Œ≤)
(define (-rng m)
  (for/set ([(_ v) (-‚àà m)]) v))

;; (Œ± ‚Ü¶ Œ≤) ...+ #:xombine (Œª (Œ≤ Œ≤) Œ≤) ‚Üí (Œ± ‚Ü¶ Œ≤)
(define (-‚à™ m‚ÇÅ #:combine [cod-‚äî (Œª (v‚Ä≤ v) v)] . m‚Çô)
  (repl (apply hash-union
               (repl->hash m‚ÇÅ)
               (foldl (Œª (m a) (cons (repl->hash m) a)) '() m‚Çô)
               #:combine cod-‚äî)))

;; (Œ± ‚Ü¶ Œ≤) Œ± (Œ≤ ‚Üí Œ≤) [Œ≤ | (‚Üí Œ≤)] ‚Üí (Œ± ‚Ü¶ Œ≤)
(define (-update m k f [o (Œª () (error 'map "has no value for key: ~s" k))])
  (<-hash (hash-update (repl->hash m) k f o)))

;; (Œ± ‚Ü¶ Œ≤) Œ± ‚Üí (Œ± ‚Ü¶ Œ≤)
(define (-remove m k)
  (<-hash (hash-remove (repl->hash m) k)))

;; (Œ± Œ≤ ‚Üí Œ≥) (Œ± ‚Ü¶ Œ≤) ‚Üí List(Œ≥)
(define (-map f m)
  (hash-map (repl->hash m) f))

;; (Œ± Œ≤ ‚Üí Boolean) (Œ± ‚Ü¶ Œ≤) ‚Üí (Œ± ‚Ü¶ Œ≤)
(define (-filter p m)
  (-for/map ([(k v) (-‚àà m)]
             #:when (p k v))
    (values k v)))

;; (Œ± ‚Ü¶ Œ≤) ùí´(Œ±) ‚Üí (Œ± ‚Ü¶ Œ≤)
(define (-restrict m ks)
  (-filter (Œª (k _) (set-‚àà k ks)) m))

;; (Œ± ‚Ü¶ Œ≤) ‚Üí ùí´([Œ± . Œ≤])
(define (->set m)
  (for/set ([(k v) (-in-map m)])
    (cons k v)))

;; ùí´([Œ± . Œ≤]) ‚Üí (Œ± ‚Ü¶ Œ≤)
(define (<-set s)
  (-for/map ([x (in-set s)])
    (values (car x) (cdr x))))

;; (Œ± ‚Ü¶ Œ≤) ‚Üí List([Œ± . Œ≤])
(define (->list m)
  (hash->list (repl->hash m)))

;; Hash(Œ±, Œ≤) ‚Üí (Œ± ‚Ü¶ Œ≤)
(define (<-hash h)
  (if (immutable-hash? h)
    (repl h)
    (error '<-hash "mutable: ~s" h)))

;; ... (values Œ± Œ≤) ... ‚Üí (Œ± ‚Ü¶ Œ≤)
(define-syntax (-for/map stx)
  (syntax-parse stx
    [(_ (~optional (~seq #:combine cod-‚äî) #:defaults ([cod-‚äî #'(Œª (v‚Ä≤ v) v)]))
        (clause ...) defs+exprs ...+)
     (with-syntax ([original stx])
       #'(for/fold/derived original ([m -‚àÖ]) (clause ...)
           (let-values ([(k v) (let () defs+exprs ...)])
             (-update m k (Œª (v‚Ä≤) (cod-‚äî v‚Ä≤ v)) 'for/map-no-value))))]))

;; (Œ± ‚Ü¶ Œ≤) ‚Üí Seq([Œ± Œ≤])
(define (-in-map m)
  (in-hash (repl->hash m)))


(module+ test
  (require rackunit)
  (require (only-in "set.rkt" [-make set] [? set?]
                    [->list set->list] [<-list set<-list]))
  (require (only-in "match.rkt" match))

  (define r -‚àÖ)
  (check-equal? ((r 'x 1) 'x) 1)
  (check-equal? ((r 'x 1) 'y 2) ((r 'y 2) 'x 1))
  (check-equal? (-‚àà 'x (r 'x 1)) #t)
  (check-equal? ('y . -‚àà . (r 'x 1)) #f)
  (check-true
   (let ([l (for/list ([(k v) (-‚àà ((r 'x 1) 'y 2))])
              (cons k v))])
     (not (not (and (member (cons 'y 2) l) (member (cons 'x 1) l))))))

  ;; (define pm (-make ['x (set 1 2 3)] ['y (set 2 4 5)]))
  ;; (match pm
  ;;   [(-make ['x (and s (set 1 t ...))] _ ...) t])
  )
