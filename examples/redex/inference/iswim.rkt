#lang racket/base
(require (for-syntax racket/base)
         lightstep/base lightstep/syntax lightstep/inference
         (only-in lightstep/monad mapM)
         (prefix-in lam: (only-in "lam.rkt" LAM FV subst)))
(provide ISWIM FV subst ฮฒv-rules ฮด ฮด-rules v-rules Cxt)

(module+ test (require rackunit))

;;=============================================================================
;; 4.1 ISWIM Expressions

(define-syntax-rule (define-iswim-language L r ...)
  (define-language L #:super lam:LAM
    [M โท= ....
       (? b?)
       `(,(? oโฟ?) ,M (... ...))]
    [V โท= (? b?) X `(ฮป ,X ,M)]
    r ...))

(define-iswim-language ISWIM
  [KWD โท= .... (? oยน?) (? oยฒ?)]
  [b โท= (? number?)]
  [oโฟ โท= (? oยน?) (? oยฒ?)]
  [oยน โท= 'add1 'sub1 'iszero]
  [oยฒ โท= '+ '- '* 'โ])

(module+ test
  (check-true  (M? 1))
  (check-true  (M? '(โ 1 2)))
  (check-false (M? '(/ 1 2))))

;; M โ ๐ซ(X)
(define/match (FV m) #:super lam:FV
  [(? b?) โ]
  [`(,(? oโฟ?) ,M ...)
   (apply โช (map FV M))])

(module+ test
  (check-equal? (FV 'x)               (set 'x))
  (check-equal? (FV '(x (y x)))       (set 'x 'y))
  (check-equal? (FV '(ฮป x (x y)))     (set 'y))
  (check-equal? (FV '(z (ฮป z z)))     (set 'z))
  (check-equal? (FV 123)              โ)
  (check-equal? (FV '(โ (f x) (g 1))) (set 'f 'x 'g)))

;; M X M โ M
(define/match (subst mโ xโ mโ) #:super lam:subst
  [((? b? b) Xโ Mโ) b]
  [(`(,(? oโฟ? oโฟ) ,M ...) Xโ Mโ)
   `(,oโฟ ,@(map (ฮป (m) (subst m Xโ Mโ)) M))])


;;=============================================================================
;; 4.2  Calculating with ISWIM

;; M --> M
(define-inference (ฮฒv-rules)
  [----------------------------------
   `(((ฮป ,X ,M) ,V) โ ,(subst M X V))])

;; oโฟ List(b) โ V
(define/match (ฮด o bs)
  [('add1 `(,(? number? m)))
   (add1 m)]
  [('sub1 `(,(? number? m)))
   (sub1 m)]
  [('iszero `(0))
   '(ฮป x (ฮป y x))]
  [('iszero `(,(? number? n)))
   #:when (not (zero? n))
   '(ฮป x (ฮป y y))]

  [('+ `(,(? number? m) ,(? number? n)))
   (+ m n)]
  [('- `(,(? number? m) ,(? number? n)))
   (- m n)]
  [('* `(,(? number? m) ,(? number? n)))
   (* m n)]
  [('โ `(,(? number? m) ,(? number? n)))
   (expt m n)])

;; M M M โ M
(define (IF0 L M N)
  (let ([X ((symbol-not-in (FV M) (FV N)) 'if0)])
    `((((iszero ,L) (ฮป ,X ,M)) (ฮป ,X ,N)) 0)))

;; M --> V
(define-inference (ฮด-rules ฮด)
  [------------------------------------------
   `((,(? oโฟ? oโฟ) ,(? b? b) ...) โ ,(ฮด oโฟ b))])

;; M --> M
(define-inference (v-rules) #:super [(ฮฒv-rules) (ฮด-rules ฮด)])

;; M โ ๐ซ(M)
(define v (call-with-values (ฮป () (v-rules)) compose1))

;; ECxt of iswim-std.rkt is same, but deterministic
(define-nondet-match-expander Cxt
  (ฮป (stx)
    (syntax-case stx ()
      [(Cxt โก)
       #'(nondet-cxt Cxt โก
                     ;`(ฮป ,X ,(? M? โก)) ;; non-termination
                     `(,(? M? โก) ,M)
                     `(,V ,(? M? โก))
                     `(,(? oโฟ?) ,V (... ...) ,(? M? โก) ,M (... ...)))])))

;; M --> M
(define-inference (-->v-rules) #:super [(v-rules)]
  [`(,m โ ,Mโฒ)
   -----------------------
   `(,(Cxt m) โ ,(Cxt Mโฒ))])

;; M โ ๐ซ(M)
(define -->v (call-with-values (ฮป () (-->v-rules)) compose1))
(define -->>v (compose1 car (repeated -->v)))

(module+ test
  (check-equal? (-->>v '((ฮป w (- (w 1) 5))
                         ((ฮป x (x 10)) (ฮป y (ฮป z (+ z y))))))
                (set 6))

  (check-equal? (-->>v (IF0 0 1 2)) (set 1))
  (check-equal? (-->>v (IF0 -1 1 2)) (set 2)))

;;=============================================================================
;; 4.4  The Yv Combinator

(define Y '(ฮป f ((ฮป x (f (x x))) (ฮป x (f (x x))))))

#;
(define Yv '(ฮป f (ฮป y (((ฮป x (ฮป z ((f (ฮป p ((x x) p))) z)))
                        (ฮป x (ฮป z ((f (ฮป p ((x x) p))) z)))) y))))
(define Yv '(ฮป f (ฮป x (((ฮป g (f (ฮป x ((g g) x))))
                        (ฮป g (f (ฮป x ((g g) x))))) x))))

(module+ test
  (define SUM `(,Yv (ฮป s (ฮป n ,(IF0 'n '0 '(+ n (s (sub1 n))))))))
  ;(-->>v `(,Y ,SUM))
  (check-equal? (-->>v `(,SUM 10)) (set 55)))

;;=============================================================================
;; 4.5  Evaluation

;; M โ V
(define/match (evalแตฅ m)
  [M
   #:when (โ? (FV M))
   (match (-->>v M)
    [(set (? b? b)) b]
    [(set `(ฮป ,X ,M)) 'function]
    [x (error 'evalแตฅ "invalid answer: ~s" x)])]
  [_ (error 'evalแตฅ "invalid input: ~s" m)])

(module+ test
  (check-exn #rx"invalid input" (ฮป () (evalแตฅ '(+ 1 x))))
  (check-equal? (evalแตฅ '(+ ((ฮป x x) 8) 2)) 10)
  (check-equal? (evalแตฅ '((ฮป x x) (ฮป x x))) 'function)
  (check-exn #rx"invalid answer" (ฮป () (evalแตฅ '(add1 (ฮป x x))))))

;;=============================================================================
;; 4.6  Consistency

;; M --> M
(define-inference (โชv-rules)
  #:forms ([`(,i:i โช ,o:o) #:where o โ (โชv i)])

  [----------
   `(,M โช ,M)]

  [------------------------------------------
   `((,(? oโฟ? oโฟ) ,(? b? b) ...) โช ,(ฮด oโฟ b))]

  [   `(,M โช ,Mโฒ)      `(,V โช ,Vโฒ)
   ------------------------------------
   `(((ฮป ,X ,M) ,V) โช ,(subst Mโฒ X Vโฒ))]

  [`(,Mโ โช ,Mโโฒ)    `(,Mโ โช ,Mโโฒ)
   -------------------------------
     `((,Mโ ,Mโ) โช (,Mโโฒ ,Mโโฒ))   ]

  [       `(,M โช ,Mโฒ)
   -------------------------
   `((ฮป ,X ,M) โช (ฮป ,X ,Mโฒ))]

  [`(,Mโฒ ...) โ (mapM โชv M)
   ------------------------------------
   `((,(? oโฟ? oโฟ) ,M ...) โช (,oโฟ ,@Mโฒ))])

;; M โ ๐ซ(M)
(define โชv (call-with-values (ฮป () (โชv-rules)) compose1))

(module+ test
  ;; (for ([mโฒ (step-โชv '((ฮป x (x x)) (ฮป y ((ฮป x x) (ฮป x x)))))])
  ;;   (printf "~s\n" mโฒ))
  ;; (for ([mโฒ (step-โชv '((ฮป y ((ฮป x x) (ฮป x x))) (ฮป y ((ฮป x x) (ฮป x x)))))])
  ;;   (printf "~s\n" mโฒ))
  )
